#include <iostream>

// Один из самых известных и широко используемых алгоритмов сортировки.
// Алгоритм состоит в выборе опорного элемента, разделении массива на 2 части относительно опорного
// (одна — все элементы, меньшие опорного элемента, вторая — большие),
// и в сортировке полученных частей рекурсивным вызовом себя от них.
// В качестве опорного элемента можно выбирать любой элемент массива, но лучше всего брать середину.

// быстрая сортировка
void quicksort(int *arr, int first, int last)
{
	int i = first;
    int j = last;
    int x = arr[(first + last) / 2];
	do
	{
		while (arr[i] < x)
			++i;
		while (arr[j] > x)
			--j;
		if (i <= j)
		{
			if (arr[i] > arr[j])
			{
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			++i;
		}
	}
	while (i <= j);
    if (i < last)
        quicksort(arr, i, last); // рекурсивный вызов функции сортировки для правой части массива
}

// заправшиваем размер массива
// просим ввести элементы массива
// выводим введенный массив
// вызываем функцию сортировки
// выводим отсортированный массив
int main()
{
    int size;
    std::cout << "Введите размер массива: ";
    std::cin >> size;
    int arr[size];
    std::cout << "Введите элементы массива: \n";
    for (int i = 0; i < size; i++)
    {
        std::cin >> arr[i];
    }
    std::cout << "Начальный массив: ";
    for (int i = 0; i < size; i++)
    {
        std::cout << arr[i] << " ";
    }
    quicksort(arr, 0, size - 1);
    std::cout << "\nОтсортированный массив: ";
    for (int i = 0; i < size; i++)
    {
        std::cout << arr[i] << " ";
    }
    std::cout << "\n";
}